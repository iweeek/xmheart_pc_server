package com.xmheart.zysoft;

import java.net.MalformedURLException;
import java.net.URL;
import javax.xml.namespace.QName;
import javax.xml.ws.WebEndpoint;
import javax.xml.ws.WebServiceClient;
import javax.xml.ws.WebServiceFeature;
import javax.xml.ws.Service;

/**
 * This class was generated by Apache CXF 3.2.4
 * 2018-03-29T10:33:30.120+08:00
 * Generated source version: 3.2.4
 *
 */
@WebServiceClient(name = "WSInterface",
                  wsdlLocation = "http://192.168.102.195:1506/services/WSInterface?wsdl",
                  targetNamespace = "http://www.zysoft.com/")
public class WSInterface extends Service {

    public final static URL WSDL_LOCATION;

    public final static QName SERVICE = new QName("http://www.zysoft.com/", "WSInterface");
    public final static QName WSInterfaceHttpSoap11Endpoint = new QName("http://www.zysoft.com/", "WSInterfaceHttpSoap11Endpoint");
    public final static QName WSInterfaceHttpSoap12Endpoint = new QName("http://www.zysoft.com/", "WSInterfaceHttpSoap12Endpoint");
    static {
        URL url = null;
        try {
            url = new URL("http://192.168.102.195:1506/services/WSInterface?wsdl");
        } catch (MalformedURLException e) {
            java.util.logging.Logger.getLogger(WSInterface.class.getName())
                .log(java.util.logging.Level.INFO,
                     "Can not initialize the default wsdl from {0}", "http://192.168.102.195:1506/services/WSInterface?wsdl");
        }
        WSDL_LOCATION = url;
    }

    public WSInterface(URL wsdlLocation) {
        super(wsdlLocation, SERVICE);
    }

    public WSInterface(URL wsdlLocation, QName serviceName) {
        super(wsdlLocation, serviceName);
    }

    public WSInterface() {
        super(WSDL_LOCATION, SERVICE);
    }

    public WSInterface(WebServiceFeature ... features) {
        super(WSDL_LOCATION, SERVICE, features);
    }

    public WSInterface(URL wsdlLocation, WebServiceFeature ... features) {
        super(wsdlLocation, SERVICE, features);
    }

    public WSInterface(URL wsdlLocation, QName serviceName, WebServiceFeature ... features) {
        super(wsdlLocation, serviceName, features);
    }




    /**
     *
     * @return
     *     returns WSInterfacePortType
     */
    @WebEndpoint(name = "WSInterfaceHttpSoap11Endpoint")
    public WSInterfacePortType getWSInterfaceHttpSoap11Endpoint() {
        return super.getPort(WSInterfaceHttpSoap11Endpoint, WSInterfacePortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WSInterfacePortType
     */
    @WebEndpoint(name = "WSInterfaceHttpSoap11Endpoint")
    public WSInterfacePortType getWSInterfaceHttpSoap11Endpoint(WebServiceFeature... features) {
        return super.getPort(WSInterfaceHttpSoap11Endpoint, WSInterfacePortType.class, features);
    }


    /**
     *
     * @return
     *     returns WSInterfacePortType
     */
    @WebEndpoint(name = "WSInterfaceHttpSoap12Endpoint")
    public WSInterfacePortType getWSInterfaceHttpSoap12Endpoint() {
        return super.getPort(WSInterfaceHttpSoap12Endpoint, WSInterfacePortType.class);
    }

    /**
     *
     * @param features
     *     A list of {@link javax.xml.ws.WebServiceFeature} to configure on the proxy.  Supported features not in the <code>features</code> parameter will have their default values.
     * @return
     *     returns WSInterfacePortType
     */
    @WebEndpoint(name = "WSInterfaceHttpSoap12Endpoint")
    public WSInterfacePortType getWSInterfaceHttpSoap12Endpoint(WebServiceFeature... features) {
        return super.getPort(WSInterfaceHttpSoap12Endpoint, WSInterfacePortType.class, features);
    }

}
